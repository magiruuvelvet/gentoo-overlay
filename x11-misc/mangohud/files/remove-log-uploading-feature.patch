diff --git a/src/keybinds.cpp b/src/keybinds.cpp
index 12e73e5..c8bf50f 100644
--- a/src/keybinds.cpp
+++ b/src/keybinds.cpp
@@ -10,7 +10,6 @@ void check_keybinds(struct overlay_params& params, uint32_t vendorID){
    auto elapsedFpsLimitToggle = now - toggle_fps_limit_press;
    auto elapsedF12 = now - last_f12_press;
    auto elapsedReloadCfg = now - reload_cfg_press;
-   auto elapsedUpload = now - last_upload_press;
 
    static Clock::time_point last_check;
    if (now - last_check < 100ms)
@@ -61,16 +60,4 @@ void check_keybinds(struct overlay_params& params, uint32_t vendorID){
       _params = &params;
       reload_cfg_press = now;
    }
-
-   if (params.permit_upload && elapsedUpload >= keyPressDelay &&
-       keys_are_pressed(params.upload_log)) {
-      last_upload_press = now;
-      logger->upload_last_log();
-   }
-
-   if (params.permit_upload && elapsedUpload >= keyPressDelay &&
-       keys_are_pressed(params.upload_logs)) {
-      last_upload_press = now;
-      logger->upload_last_logs();
-   }
 }
diff --git a/src/keybinds.h b/src/keybinds.h
index 83dff61..bb99030 100644
--- a/src/keybinds.h
+++ b/src/keybinds.h
@@ -11,7 +11,7 @@
 typedef unsigned long KeySym;
 #endif
 
-Clock::time_point last_f2_press, toggle_fps_limit_press , last_f12_press, reload_cfg_press, last_upload_press;
+Clock::time_point last_f2_press, toggle_fps_limit_press , last_f12_press, reload_cfg_press;
 
 #if defined(HAVE_X11)
 bool keys_are_pressed(const std::vector<KeySym>& keys) {
diff --git a/src/logging.cpp b/src/logging.cpp
index 7126803..464a55f 100644
--- a/src/logging.cpp
+++ b/src/logging.cpp
@@ -34,25 +34,6 @@ string exec(string command) {
     return result;
 }
 
-void upload_file(std::string logFile){
-  std::string command = "curl --include --request POST https://flightlessmango.com/logs -F 'log[game_id]=26506' -F 'log[user_id]=176' -F 'attachment=true' -A 'mangohud' ";
-  command += " -F 'log[uploads][]=@" + logFile + "'";
-
-  command += " | grep Location | cut -c11-";
-  std::string url = exec(command);
-  exec("xdg-open " + url);
-}
-
-void upload_files(const std::vector<std::string>& logFiles){
-  std::string command = "curl --include --request POST https://flightlessmango.com/logs -F 'log[game_id]=26506' -F 'log[user_id]=176' -F 'attachment=true' -A 'mangohud' ";
-  for (auto& file : logFiles)
-    command += " -F 'log[uploads][]=@" + file + "'";
-
-  command += " | grep Location | cut -c11-";
-  std::string url = exec(command);
-  exec("xdg-open " + url);
-}
-
 bool compareByFps(const logData &a, const logData &b)
 {
     return a.fps < b.fps;
@@ -242,21 +223,6 @@ void Logger::notify_data_valid() {
   m_values_valid_cv.notify_all();
 }
 
-void Logger::upload_last_log() {
-  if(m_log_files.empty()) return;
-  std::thread(upload_file, m_log_files.back()).detach();
-}
-
-void Logger::upload_last_logs() {
-  if(m_log_files.empty()) return;
-  std::thread(upload_files, m_log_files).detach();
-}
-
-void autostart_log(int sleep) {
-  os_time_sleep(sleep * 1000000);
-  logger->start_logging();
-}
-
 void Logger::calculate_benchmark_data(){
   vector<float> sorted {};
   for (auto& point : m_log_array)
diff --git a/src/logging.h b/src/logging.h
index 15edc75..2246f5e 100644
--- a/src/logging.h
+++ b/src/logging.h
@@ -50,8 +50,6 @@ public:
   const std::vector<logData>& get_log_data() const noexcept { return m_log_array; }
   void clear_log_data() noexcept { m_log_array.clear(); }
 
-  void upload_last_log();
-  void upload_last_logs();
   void calculate_benchmark_data();
   const std::string output_folder;
   const int64_t log_interval;
@@ -78,6 +76,5 @@ extern uint64_t frametime;
 extern logData currentLogData;
 
 std::string exec(std::string command);
-void autostart_log(int sleep);
 
 #endif //MANGOHUD_LOGGING_H
diff --git a/src/overlay.cpp b/src/overlay.cpp
index 9581a21..cf87b0d 100644
--- a/src/overlay.cpp
+++ b/src/overlay.cpp
@@ -784,8 +784,6 @@ void init_gpu_stats(uint32_t& vendorID, uint32_t reported_deviceID, overlay_para
       }
    }
 #endif
-   if (!params.permit_upload)
-      SPDLOG_INFO("Uploading is disabled (permit_upload = 0)");
 }
 
 void init_system_info(){
diff --git a/src/overlay_params.cpp b/src/overlay_params.cpp
index 68694a6..9de440e 100644
--- a/src/overlay_params.cpp
+++ b/src/overlay_params.cpp
@@ -147,16 +147,12 @@ parse_string_to_keysym_vec(const char *str)
 #define parse_toggle_hud         parse_string_to_keysym_vec
 #define parse_toggle_logging     parse_string_to_keysym_vec
 #define parse_reload_cfg         parse_string_to_keysym_vec
-#define parse_upload_log         parse_string_to_keysym_vec
-#define parse_upload_logs        parse_string_to_keysym_vec
 #define parse_toggle_fps_limit   parse_string_to_keysym_vec
 
 #else
 #define parse_toggle_hud(x)      {}
 #define parse_toggle_logging(x)  {}
 #define parse_reload_cfg(x)      {}
-#define parse_upload_log(x)      {}
-#define parse_upload_logs(x)     {}
 #define parse_toggle_fps_limit(x)    {}
 #endif
 
@@ -400,11 +396,9 @@ parse_gl_size_query(const char *str)
 #define parse_font_scale(s) parse_float(s)
 #define parse_background_alpha(s) parse_float(s)
 #define parse_alpha(s) parse_float(s)
-#define parse_permit_upload(s) parse_unsigned(s)
 #define parse_no_small_font(s) parse_unsigned(s) != 0
 #define parse_cellpadding_y(s) parse_float(s)
 #define parse_table_columns(s) parse_unsigned(s)
-#define parse_autostart_log(s) parse_unsigned(s)
 #define parse_gl_bind_framebuffer(s) parse_unsigned(s)
 #define parse_gl_dont_flip(s) parse_unsigned(s) != 0
 #define parse_round_corners(s) parse_unsigned(s)
@@ -623,7 +617,6 @@ parse_overlay_config(struct overlay_params *params,
    params->font_scale_media_player = 0.55f;
    params->log_interval = 100;
    params->media_player_format = { "{title}", "{artist}", "{album}" };
-   params->permit_upload = 0;
    params->benchmark_percentiles = { "97", "AVG"};
    params->gpu_load_value = { 60, 90 };
    params->cpu_load_value = { 60, 90 };
@@ -639,8 +632,6 @@ parse_overlay_config(struct overlay_params *params,
    params->toggle_fps_limit = { XK_Shift_L, XK_F1 };
    params->toggle_logging = { XK_Shift_L, XK_F2 };
    params->reload_cfg = { XK_Shift_L, XK_F4 };
-   params->upload_log = { XK_Shift_L, XK_F3 };
-   params->upload_logs = { XK_Control_L, XK_F3 };
 #endif
 
 #ifdef _WIN32
@@ -846,8 +837,6 @@ parse_overlay_config(struct overlay_params *params,
       logger->stop_logging();
    }
    logger = std::make_unique<Logger>(params);
-   if(params->autostart_log && !logger->is_active())
-      std::thread(autostart_log, params->autostart_log).detach();
 #ifdef MANGOAPP
    {
       extern bool new_frame;
diff --git a/src/overlay_params.h b/src/overlay_params.h
index b44aff8..5fb66cb 100644
--- a/src/overlay_params.h
+++ b/src/overlay_params.h
@@ -114,8 +114,6 @@ typedef unsigned long KeySym;
    OVERLAY_PARAM_CUSTOM(toggle_fps_limit)            \
    OVERLAY_PARAM_CUSTOM(toggle_logging)              \
    OVERLAY_PARAM_CUSTOM(reload_cfg)                  \
-   OVERLAY_PARAM_CUSTOM(upload_log)                  \
-   OVERLAY_PARAM_CUSTOM(upload_logs)                 \
    OVERLAY_PARAM_CUSTOM(offset_x)                    \
    OVERLAY_PARAM_CUSTOM(offset_y)                    \
    OVERLAY_PARAM_CUSTOM(background_alpha)            \
@@ -142,7 +140,6 @@ typedef unsigned long KeySym;
    OVERLAY_PARAM_CUSTOM(cpu_text)                    \
    OVERLAY_PARAM_CUSTOM(gpu_text)                    \
    OVERLAY_PARAM_CUSTOM(log_interval)                \
-   OVERLAY_PARAM_CUSTOM(permit_upload)               \
    OVERLAY_PARAM_CUSTOM(benchmark_percentiles)       \
    OVERLAY_PARAM_CUSTOM(help)                        \
    OVERLAY_PARAM_CUSTOM(gpu_load_value)              \
@@ -154,7 +151,6 @@ typedef unsigned long KeySym;
    OVERLAY_PARAM_CUSTOM(cellpadding_y)               \
    OVERLAY_PARAM_CUSTOM(table_columns)               \
    OVERLAY_PARAM_CUSTOM(blacklist)                   \
-   OVERLAY_PARAM_CUSTOM(autostart_log)               \
    OVERLAY_PARAM_CUSTOM(round_corners)               \
    OVERLAY_PARAM_CUSTOM(fsr_steam_sharpness)         \
    OVERLAY_PARAM_CUSTOM(fcat_screen_edge)            \
@@ -241,14 +237,11 @@ struct overlay_params {
    std::vector<KeySym> toggle_fps_limit;
    std::vector<KeySym> toggle_logging;
    std::vector<KeySym> reload_cfg;
-   std::vector<KeySym> upload_log;
-   std::vector<KeySym> upload_logs;
    std::string time_format, output_folder, output_file;
    std::string pci_dev;
    std::string media_player_name;
    std::string cpu_text, gpu_text;
    std::vector<std::string> blacklist;
-   unsigned autostart_log;
    std::vector<std::string> media_player_format;
    std::vector<std::string> benchmark_percentiles;
    std::string font_file, font_file_text;
@@ -257,7 +250,6 @@ struct overlay_params {
    std::string custom_text;
    std::string config_file_path;
    std::unordered_map<std::string,std::string> options;
-   int permit_upload;
    int fsr_steam_sharpness;
    unsigned short fcat_screen_edge;
    unsigned short fcat_overlay_width;
diff --git a/src/vulkan.cpp b/src/vulkan.cpp
index 0ed058a..184e917 100644
--- a/src/vulkan.cpp
+++ b/src/vulkan.cpp
@@ -24,6 +24,8 @@
 #include <windows.h>
 #endif
 #include <string.h>
+#include <string>
+#include <sstream>
 #include <stdlib.h>
 #include <assert.h>
 #include <thread>
